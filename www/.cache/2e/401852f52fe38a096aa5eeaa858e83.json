{"id":"../../spinal-env-viewer-context-geographic-service/build/index.js","dependencies":[{"name":"/home/spinalcom/Documents/spinalcom/spinalcom/spinalcom_flo_attributs_tabs/node_modules/spinal-browser-building-information/package.json","includedInParent":true,"mtime":1570182785170},{"name":"/home/spinalcom/Documents/spinalcom/spinalcom/spinalcom_flo_attributs_tabs/node_modules/spinal-env-viewer-context-geographic-service/package.json","includedInParent":true,"mtime":1569938308552},{"name":"spinal-env-viewer-graph-service","loc":{"line":7,"column":43},"parent":"/home/spinalcom/Documents/spinalcom/spinalcom/spinalcom_flo_attributs_tabs/node_modules/spinal-env-viewer-context-geographic-service/build/index.js","resolved":"/home/spinalcom/Documents/spinalcom/spinalcom/spinalcom_flo_attributs_tabs/node_modules/spinal-env-viewer-graph-service/dist/index.js"},{"name":"spinal-models-building-elements","loc":{"line":9,"column":44},"parent":"/home/spinalcom/Documents/spinalcom/spinalcom/spinalcom_flo_attributs_tabs/node_modules/spinal-env-viewer-context-geographic-service/build/index.js","resolved":"/home/spinalcom/Documents/spinalcom/spinalcom/spinalcom_flo_attributs_tabs/node_modules/spinal-models-building-elements/build/index.js"},{"name":"./constants","loc":{"line":11,"column":25},"parent":"/home/spinalcom/Documents/spinalcom/spinalcom/spinalcom_flo_attributs_tabs/node_modules/spinal-env-viewer-context-geographic-service/build/index.js","resolved":"/home/spinalcom/Documents/spinalcom/spinalcom/spinalcom_flo_attributs_tabs/node_modules/spinal-env-viewer-context-geographic-service/build/constants.js"},{"name":"spinal-core-connectorjs_type","loc":{"line":15,"column":42},"parent":"/home/spinalcom/Documents/spinalcom/spinalcom/spinalcom_flo_attributs_tabs/node_modules/spinal-env-viewer-context-geographic-service/build/index.js","resolved":"/home/spinalcom/Documents/spinalcom/spinalcom/spinalcom_flo_attributs_tabs/node_modules/spinal-core-connectorjs_type/dist/SpinalModel.js"}],"generated":{"js":"\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\n\nvar _spinalEnvViewerGraphService = require(\"spinal-env-viewer-graph-service\");\n\nvar _spinalModelsBuildingElements = require(\"spinal-models-building-elements\");\n\nvar _constants = require(\"./constants\");\n\nvar constants = _interopRequireWildcard(_constants);\n\nvar _spinalCoreConnectorjs_type = require(\"spinal-core-connectorjs_type\");\n\nfunction _interopRequireWildcard(obj) { if (obj && obj.__esModule) { return obj; } else { var newObj = {}; if (obj != null) { for (var key in obj) { if (Object.prototype.hasOwnProperty.call(obj, key)) newObj[key] = obj[key]; } } newObj.default = obj; return newObj; } }\n\n// import bimobjService from 'spinal-env-viewer-plugin-bimobjectservice';\n\nconst bimobjService = window.spinal.BimObjectService;\n\nconst GeographicContext = {\n  constants: constants,\n\n  /**\n   * Returns the child type of the type given as parameter.\n   * @param {string} parentType\n   * @return {string} Child type\n   */\n  getChildType(parentType) {\n    let parentTypeIndex = constants.GEOGRAPHIC_TYPES_ORDER.indexOf(parentType);\n\n    if (parentTypeIndex === -1) {\n      return \"\";\n    }\n\n    return constants.GEOGRAPHIC_TYPES_ORDER[parentTypeIndex + 1];\n  },\n\n  /**\n   * It Takes as parameter a context name, returns true if a context with the same name does not exist, else returns false.\n   * @param {string} contextName\n   * @returns {Boolean}\n   */\n  createContext(contextName) {\n    if (typeof contextName !== \"string\") {\n      throw Error(\"contextName must be a string\");\n    }\n\n    const context = _spinalEnvViewerGraphService.SpinalGraphService.getContext(contextName);\n\n    if (typeof context !== \"undefined\") return context;\n\n    return _spinalEnvViewerGraphService.SpinalGraphService.addContext(contextName, constants.CONTEXT_TYPE, new _spinalModelsBuildingElements.AbstractElement(contextName));\n  },\n\n  /**\n   * This method takes as parameters a context (SpinalContext), a parent node (must be a SpinalNode) and a string representing the abstract element type;\n   * @param {SpinalContext} context - The Context geographic\n   * @param {SpinalNode} node - The parent Node\n   * @param {string} elementName - The AbstactElement Name\n   * @returns {Boolean}\n   */\n  addAbstractElement(context, node, elementName) {\n    const parentType = node.type.get();\n    const childType = this.getChildType(parentType);\n\n    if (!childType) {\n      throw Error(`${parentType} is not a valid type in geographic context`);\n    }\n\n    const childRelation = constants.MAP_TYPE_RELATION.get(childType);\n\n    const childNode = _spinalEnvViewerGraphService.SpinalGraphService.createNode({\n      name: elementName,\n      type: childType\n    }, new _spinalModelsBuildingElements.AbstractElement(elementName));\n    _spinalEnvViewerGraphService.SpinalGraphService.addChildInContext(node.id.get(), childNode, context.id.get(), childRelation, _spinalEnvViewerGraphService.SPINAL_RELATION_TYPE);\n\n    this.addToReferenceContext(childNode);\n\n    return true;\n  },\n\n  /**\n   * @param {string} contextId - The Context geographic Id\n   * @param {string} parentId - The parent Node Id\n   * @param {string} buildingName - Building Name\n   */\n  addBuilding(contextId, parentId, buildingName) {\n\n    let nodeId = _spinalEnvViewerGraphService.SpinalGraphService.createNode({\n      name: buildingName,\n      type: constants.BUILDING_TYPE\n    }, new _spinalModelsBuildingElements.AbstractElement(buildingName));\n\n    this.addToReferenceContext(nodeId);\n\n    return _spinalEnvViewerGraphService.SpinalGraphService.addChildInContext(parentId, nodeId, contextId, constants.BUILDING_RELATION, _spinalEnvViewerGraphService.SPINAL_RELATION_TYPE);\n  },\n\n  /**\n   * @param {string} contextId - The Context geographic Id\n   * @param {string} parentId - The parent Node Id\n   * @param {string} floorName - the floor Name\n   */\n  addFloor(contextId, parentId, floorName) {\n\n    let nodeId = _spinalEnvViewerGraphService.SpinalGraphService.createNode({\n      name: floorName,\n      type: constants.FLOOR_TYPE\n    }, new _spinalModelsBuildingElements.AbstractElement(floorName));\n\n    this.addToReferenceContext(nodeId);\n\n    return _spinalEnvViewerGraphService.SpinalGraphService.addChildInContext(parentId, nodeId, contextId, constants.FLOOR_RELATION, _spinalEnvViewerGraphService.SPINAL_RELATION_TYPE);\n  },\n\n  /**\n   * @param {string} contextId - The Context geographic Id\n   * @param {string} parentId - The parent Node Id\n   * @param {string} siteName - the site Name\n   */\n  addSite(contextId, parentId, siteName) {\n\n    let nodeId = _spinalEnvViewerGraphService.SpinalGraphService.createNode({\n      name: siteName,\n      type: constants.SITE_TYPE\n    }, new _spinalModelsBuildingElements.AbstractElement(siteName));\n\n    this.addToReferenceContext(nodeId);\n\n    return _spinalEnvViewerGraphService.SpinalGraphService.addChildInContext(parentId, nodeId, contextId, constants.SITE_RELATION, _spinalEnvViewerGraphService.SPINAL_RELATION_TYPE);\n  },\n\n  /**\n   * @param {string} contextId - The Context geographic Id\n   * @param {string} parentId - The parent Node Id\n   * @param {string} zoneName - Zone name\n   */\n  addZone(contextId, parentId, zoneName) {\n    let nodeId = _spinalEnvViewerGraphService.SpinalGraphService.createNode({\n      name: zoneName,\n      type: constants.ZONE_TYPE\n    }, new _spinalModelsBuildingElements.AbstractElement(zoneName));\n\n    this.addToReferenceContext(nodeId);\n\n    return _spinalEnvViewerGraphService.SpinalGraphService.addChildInContext(parentId, nodeId, contextId, constants.ZONE_RELATION, _spinalEnvViewerGraphService.SPINAL_RELATION_TYPE);\n  },\n\n  /**\n   * @param {string} contextId - The Context geographic\n   * @param {string} parentId - The parent Node\n   * @param {string} roomName - Room Name\n   */\n  addRoom(contextId, parentId, roomName) {\n    let nodeId = _spinalEnvViewerGraphService.SpinalGraphService.createNode({\n      name: roomName,\n      type: constants.ROOM_TYPE\n    }, new _spinalModelsBuildingElements.AbstractElement(roomName));\n\n    this.addToReferenceContext(nodeId);\n\n    return _spinalEnvViewerGraphService.SpinalGraphService.addChildInContext(parentId, nodeId, contextId, constants.ROOM_RELATION, _spinalEnvViewerGraphService.SPINAL_RELATION_TYPE);\n  },\n\n  /**\n   * it uses bimObject service to add all dbIds passed as parameters.\n   * the parameter dbIds can be a simple dbIds or a list of dbIds.\n   * @param {SpinalContext} context - The Context geographic\n   * @param {SpinalNode} node - The parent Node\n   * @param {Number | Array<Number>} dbIds - Can be\n   */\n  addBimElement(context, node, dbIds, model) {\n\n    if (!Array.isArray(dbIds)) dbIds = [dbIds];\n\n    // le bimObjectService\n    // let c = SpinalGraphService.getRealNode(context.id.get());\n    // let n = SpinalGraphService.getRealNode(node.id.get());\n\n    let contextId = context.id.get();\n    let parentId = node.id.get();\n\n    dbIds.forEach(element => {\n      // bimobjService.addBIMObject(c, n, element.dbId, element.name);\n      window.spinal.BimObjectService.addBIMObject(contextId, parentId, element.dbId, element.name, model);\n    });\n  },\n\n  _getReferenceContextName(nodeId) {\n    let node = _spinalEnvViewerGraphService.SpinalGraphService.getInfo(nodeId);\n\n    switch (node.type.get()) {\n      case constants.SITE_TYPE:\n        return {\n          name: constants.SITE_REFERENCE_CONTEXT,\n          relation: constants.SITE_RELATION\n        };\n      case constants.BUILDING_TYPE:\n        return {\n          name: constants.BUILDING_REFERENCE_CONTEXT,\n          relation: constants.BUILDING_RELATION\n        };\n\n      case constants.FLOOR_TYPE:\n        return {\n          name: constants.FLOOR_REFERENCE_CONTEXT,\n          relation: constants.FLOOR_RELATION\n        };\n\n      case constants.ZONE_TYPE:\n        return {\n          name: constants.ZONE_REFERENCE_CONTEXT,\n          relation: constants.ZONE_RELATION\n        };\n\n      case constants.ROOM_TYPE:\n        return {\n          name: constants.ROOM_REFERENCE_CONTEXT,\n          relation: constants.ROOM_RELATION\n        };\n\n      default:\n        return undefined;\n    }\n  },\n\n  /**\n   *\n   * @param {string} nodeId\n   */\n  addToReferenceContext(nodeId) {\n    let obj = this._getReferenceContextName(nodeId);\n\n    if (typeof obj !== \"undefined\") {\n      let context = _spinalEnvViewerGraphService.SpinalGraphService.getContext(obj.name);\n\n      if (typeof context !== \"undefined\") {\n\n        return _spinalEnvViewerGraphService.SpinalGraphService.addChild(context.info.id.get(), nodeId, obj.relation, _spinalEnvViewerGraphService.SPINAL_RELATION_LST_PTR_TYPE);\n      }\n\n      return _spinalEnvViewerGraphService.SpinalGraphService.addContext(obj.name, obj.name.replace(\".\", \"\"), new _spinalCoreConnectorjs_type.Model({\n        name: obj.name\n      })).then(c => {\n        return _spinalEnvViewerGraphService.SpinalGraphService.addChild(c.info.id.get(), nodeId, obj.relation, _spinalEnvViewerGraphService.SPINAL_RELATION_LST_PTR_TYPE);\n      });\n    }\n  },\n\n  /**\n   *\n   * @param {string} contextId\n   */\n  addContextToReference(contextId) {\n    let context = _spinalEnvViewerGraphService.SpinalGraphService.getRealNode(contextId);\n\n    if (typeof context !== \"undefined\") {\n      return context.forEach(constants.GEOGRAPHIC_RELATIONS, node => {\n        _spinalEnvViewerGraphService.SpinalGraphService._addNode(node);\n        this.addToReferenceContext(node.info.id.get());\n      });\n    }\n  }\n\n};\n\nexports.default = GeographicContext;\n"},"sourceMaps":{"js":{"version":3,"sources":["../src/index.js"],"names":["constants","bimobjService","window","spinal","BimObjectService","GeographicContext","getChildType","parentType","parentTypeIndex","GEOGRAPHIC_TYPES_ORDER","indexOf","createContext","contextName","Error","context","SpinalGraphService","getContext","addContext","CONTEXT_TYPE","AbstractElement","addAbstractElement","node","elementName","type","get","childType","childRelation","MAP_TYPE_RELATION","childNode","createNode","name","addChildInContext","id","SPINAL_RELATION_TYPE","addToReferenceContext","addBuilding","contextId","parentId","buildingName","nodeId","BUILDING_TYPE","BUILDING_RELATION","addFloor","floorName","FLOOR_TYPE","FLOOR_RELATION","addSite","siteName","SITE_TYPE","SITE_RELATION","addZone","zoneName","ZONE_TYPE","ZONE_RELATION","addRoom","roomName","ROOM_TYPE","ROOM_RELATION","addBimElement","dbIds","model","Array","isArray","forEach","element","addBIMObject","dbId","_getReferenceContextName","getInfo","SITE_REFERENCE_CONTEXT","relation","BUILDING_REFERENCE_CONTEXT","FLOOR_REFERENCE_CONTEXT","ZONE_REFERENCE_CONTEXT","ROOM_REFERENCE_CONTEXT","undefined","obj","addChild","info","SPINAL_RELATION_LST_PTR_TYPE","replace","Model","then","c","addContextToReference","getRealNode","GEOGRAPHIC_RELATIONS","_addNode"],"mappings":"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","file":"index.js","sourcesContent":["import {\n  SPINAL_RELATION_TYPE,\n  SPINAL_RELATION_LST_PTR_TYPE,\n  SpinalGraphService\n} from \"spinal-env-viewer-graph-service\";\nimport {\n  AbstractElement\n} from \"spinal-models-building-elements\";\n\n// import bimobjService from 'spinal-env-viewer-plugin-bimobjectservice';\n\nconst bimobjService = window.spinal.BimObjectService;\n\nimport * as constants from \"./constants\";\nimport {\n  Model\n} from \"spinal-core-connectorjs_type\";\n\nconst GeographicContext = {\n  constants: constants,\n\n  /**\n   * Returns the child type of the type given as parameter.\n   * @param {string} parentType\n   * @return {string} Child type\n   */\n  getChildType(parentType) {\n    let parentTypeIndex = constants.GEOGRAPHIC_TYPES_ORDER.indexOf(\n      parentType);\n\n    if (parentTypeIndex === -1) {\n      return \"\";\n    }\n\n    return constants.GEOGRAPHIC_TYPES_ORDER[parentTypeIndex + 1];\n  },\n\n  /**\n   * It Takes as parameter a context name, returns true if a context with the same name does not exist, else returns false.\n   * @param {string} contextName\n   * @returns {Boolean}\n   */\n  createContext(contextName) {\n    if (typeof contextName !== \"string\") {\n      throw Error(\n        \"contextName must be a string\");\n    }\n\n    const context = SpinalGraphService.getContext(contextName);\n\n    if (typeof context !== \"undefined\") return context;\n\n\n    return SpinalGraphService.addContext(contextName,\n      constants.CONTEXT_TYPE,\n      new AbstractElement(contextName));\n\n\n  },\n\n  /**\n   * This method takes as parameters a context (SpinalContext), a parent node (must be a SpinalNode) and a string representing the abstract element type;\n   * @param {SpinalContext} context - The Context geographic\n   * @param {SpinalNode} node - The parent Node\n   * @param {string} elementName - The AbstactElement Name\n   * @returns {Boolean}\n   */\n  addAbstractElement(context, node, elementName) {\n    const parentType = node.type.get();\n    const childType = this.getChildType(parentType);\n\n    if (!childType) {\n      throw Error(\n        `${parentType} is not a valid type in geographic context`\n      );\n    }\n\n    const childRelation = constants.MAP_TYPE_RELATION.get(childType);\n\n    const childNode = SpinalGraphService.createNode({\n        name: elementName,\n        type: childType\n      },\n      new AbstractElement(elementName)\n    );\n    SpinalGraphService.addChildInContext(node.id.get(), childNode, context.id\n      .get(), childRelation, SPINAL_RELATION_TYPE);\n\n    this.addToReferenceContext(childNode);\n\n    return true;\n  },\n\n  /**\n   * @param {string} contextId - The Context geographic Id\n   * @param {string} parentId - The parent Node Id\n   * @param {string} buildingName - Building Name\n   */\n  addBuilding(contextId, parentId, buildingName) {\n\n    let nodeId = SpinalGraphService.createNode({\n      name: buildingName,\n      type: constants.BUILDING_TYPE\n    }, new AbstractElement(buildingName));\n\n    this.addToReferenceContext(nodeId);\n\n\n    return SpinalGraphService.addChildInContext(parentId, nodeId, contextId,\n      constants.BUILDING_RELATION, SPINAL_RELATION_TYPE)\n\n  },\n\n\n\n\n\n  /**\n   * @param {string} contextId - The Context geographic Id\n   * @param {string} parentId - The parent Node Id\n   * @param {string} floorName - the floor Name\n   */\n  addFloor(contextId, parentId, floorName) {\n\n    let nodeId = SpinalGraphService.createNode({\n      name: floorName,\n      type: constants.FLOOR_TYPE\n    }, new AbstractElement(floorName));\n\n    this.addToReferenceContext(nodeId);\n\n    return SpinalGraphService.addChildInContext(parentId, nodeId, contextId,\n      constants.FLOOR_RELATION, SPINAL_RELATION_TYPE)\n\n  },\n\n\n  /**\n   * @param {string} contextId - The Context geographic Id\n   * @param {string} parentId - The parent Node Id\n   * @param {string} siteName - the site Name\n   */\n  addSite(contextId, parentId, siteName) {\n\n    let nodeId = SpinalGraphService.createNode({\n      name: siteName,\n      type: constants.SITE_TYPE\n    }, new AbstractElement(siteName));\n\n    this.addToReferenceContext(nodeId);\n\n    return SpinalGraphService.addChildInContext(parentId, nodeId, contextId,\n      constants.SITE_RELATION, SPINAL_RELATION_TYPE)\n\n  },\n\n\n  /**\n   * @param {string} contextId - The Context geographic Id\n   * @param {string} parentId - The parent Node Id\n   * @param {string} zoneName - Zone name\n   */\n  addZone(contextId, parentId, zoneName) {\n    let nodeId = SpinalGraphService.createNode({\n      name: zoneName,\n      type: constants.ZONE_TYPE\n    }, new AbstractElement(zoneName));\n\n    this.addToReferenceContext(nodeId);\n\n    return SpinalGraphService.addChildInContext(parentId, nodeId, contextId,\n      constants.ZONE_RELATION, SPINAL_RELATION_TYPE);\n\n  },\n\n\n  /**\n   * @param {string} contextId - The Context geographic\n   * @param {string} parentId - The parent Node\n   * @param {string} roomName - Room Name\n   */\n  addRoom(contextId, parentId, roomName) {\n    let nodeId = SpinalGraphService.createNode({\n      name: roomName,\n      type: constants.ROOM_TYPE\n    }, new AbstractElement(roomName));\n\n    this.addToReferenceContext(nodeId);\n\n    return SpinalGraphService.addChildInContext(parentId, nodeId, contextId,\n      constants.ROOM_RELATION, SPINAL_RELATION_TYPE);\n  },\n\n  /**\n   * it uses bimObject service to add all dbIds passed as parameters.\n   * the parameter dbIds can be a simple dbIds or a list of dbIds.\n   * @param {SpinalContext} context - The Context geographic\n   * @param {SpinalNode} node - The parent Node\n   * @param {Number | Array<Number>} dbIds - Can be\n   */\n  addBimElement(context, node, dbIds, model) {\n\n    if (!Array.isArray(dbIds)) dbIds = [dbIds];\n\n\n    // le bimObjectService\n    // let c = SpinalGraphService.getRealNode(context.id.get());\n    // let n = SpinalGraphService.getRealNode(node.id.get());\n\n    let contextId = context.id.get();\n    let parentId = node.id.get();\n\n    dbIds.forEach(element => {\n      // bimobjService.addBIMObject(c, n, element.dbId, element.name);\n      window.spinal.BimObjectService.addBIMObject(contextId, parentId,\n        element.dbId,\n        element.name, model)\n    });\n  },\n\n\n  _getReferenceContextName(nodeId) {\n    let node = SpinalGraphService.getInfo(nodeId);\n\n    switch (node.type.get()) {\n      case constants.SITE_TYPE:\n        return {\n          name: constants.SITE_REFERENCE_CONTEXT,\n            relation: constants.SITE_RELATION\n        };\n      case constants.BUILDING_TYPE:\n        return {\n          name: constants.BUILDING_REFERENCE_CONTEXT,\n            relation: constants.BUILDING_RELATION\n        };\n\n      case constants.FLOOR_TYPE:\n        return {\n          name: constants.FLOOR_REFERENCE_CONTEXT,\n            relation: constants.FLOOR_RELATION\n        };\n\n      case constants.ZONE_TYPE:\n        return {\n          name: constants.ZONE_REFERENCE_CONTEXT,\n            relation: constants.ZONE_RELATION\n        };\n\n      case constants.ROOM_TYPE:\n        return {\n          name: constants.ROOM_REFERENCE_CONTEXT,\n            relation: constants.ROOM_RELATION\n        };\n\n      default:\n        return undefined;\n    }\n  },\n\n  /**\n   *\n   * @param {string} nodeId\n   */\n  addToReferenceContext(nodeId) {\n    let obj = this._getReferenceContextName(nodeId);\n\n    if (typeof obj !== \"undefined\") {\n      let context = SpinalGraphService.getContext(obj.name);\n\n      if (typeof context !== \"undefined\") {\n\n        return SpinalGraphService.addChild(context.info.id.get(), nodeId,\n          obj.relation,\n          SPINAL_RELATION_LST_PTR_TYPE);\n      }\n\n      return SpinalGraphService.addContext(obj.name, obj.name.replace(\n        \".\", \"\"), new Model({\n        name: obj.name\n      })).then(c => {\n        return SpinalGraphService.addChild(c.info.id.get(), nodeId,\n          obj.relation,\n          SPINAL_RELATION_LST_PTR_TYPE);\n      });\n\n\n    }\n\n  },\n\n  /**\n   *\n   * @param {string} contextId\n   */\n  addContextToReference(contextId) {\n    let context = SpinalGraphService.getRealNode(contextId);\n\n    if (typeof context !== \"undefined\") {\n      return context.forEach(constants.GEOGRAPHIC_RELATIONS, (node) => {\n        SpinalGraphService._addNode(node);\n        this.addToReferenceContext(node.info.id.get());\n      })\n    }\n\n  }\n\n};\n\nexport default GeographicContext;"]}},"error":null,"hash":"7d6c6444b60b286834988173cf238709","cacheData":{"env":{}}}